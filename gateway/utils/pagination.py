from typing import TypeVar, Any, AsyncIterator, cast, Type
from contextlib import asynccontextmanager

from fastapi import Depends
from fastapi.dependencies.utils import (
    get_body_field,
    get_parameterless_sub_dependant,
    lenient_issubclass,
)
from fastapi_pagination.api import pagination_ctx
from fastapi_pagination.bases import AbstractPage
from starlette.routing import request_response

from utils.routing import CustomAPIRoute
from utils.app import CustomFastAPI


ParentT = TypeVar("ParentT", CustomAPIRoute, CustomFastAPI)


def _update_route(route: CustomAPIRoute) -> None:
    if any(hasattr(d.call, "__page_ctx_dep__") for d in route.dependant.dependencies):
        return

    if not lenient_issubclass(route.response_model, AbstractPage):
        return

    cls = cast(Type[AbstractPage[Any]], route.response_model)
    dep = Depends(pagination_ctx(cls, __page_ctx_dep__=True))

    route.dependencies.append(dep)
    route.dependant.dependencies.append(
        get_parameterless_sub_dependant(
            depends=dep,
            path=route.path_format,
        ),
    )

    route.body_field = get_body_field(dependant=route.dependant, name=route.unique_id)
    route.app = request_response(route.get_route_handler())

    for cls, options in reversed(route.middleware):
        route.app = cls(app=route.app, **options)


def _add_pagination(parent: ParentT) -> None:
    if hasattr(parent, "openapi_schema"):
        parent.openapi_schema = None

    for route in parent.routes:
        # Avoid starlette routes (autogenerated for documentation)
        if isinstance(route, CustomAPIRoute):
            _update_route(route)


def add_pagination(parent: ParentT) -> ParentT:
    _add_pagination(parent)

    router = parent.router if isinstance(parent, CustomFastAPI) else parent
    _original_lifespan_context = router.lifespan_context

    @asynccontextmanager
    async def lifespan(app: Any) -> AsyncIterator[Any]:
        _add_pagination(parent)

        async with _original_lifespan_context(app) as maybe_state:
            yield maybe_state

    router.lifespan_context = lifespan
    return parent
